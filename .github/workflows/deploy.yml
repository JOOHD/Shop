name: Java CI with Gradle and Docker Deployment

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # ① Checkout: 깃허브 저장소의 최신 코드를 가져온다.
      - uses: actions/checkout@v4

      # ② JDK 설정: Java 17 환경을 세팅한다.
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # ③ application.yml 값 치환: secrets에 저장된 민감 정보를 application.yml 파일에 자동 반영한다.
      - name: Set yaml file
        uses: microsoft/variable-substitution@v1
        with:
          files: ${{ env.RESOURCE_PATH }}  # 예: ./src/main/resources/application.yml
        env:
          spring.jwt.secret: ${{ secrets.JWT_SECRET }}
          spring.datasource.url: jdbc:mysql://${{ secrets.MYSQL_HOST }}:3306/pushop?&serverTimezone=Asia/Seoul
          spring.datasource.username: ${{ secrets.MYSQL_USERNAME }}
          spring.datasource.password: ${{ secrets.MYSQL_PASSWORD }}
          spring.mail.password: ${{ secrets.NAVER_PASSWORD }}
          spring.backend.url: ${{ secrets.BACKEND_URL }}
          spring.frontend.url: ${{ secrets.FRONTEND_URL }}
          spring.imp.api.key: ${{ secrets.IMP_API_KEY }}
          spring.imp.secretkey: ${{ secrets.IMP_SECRET_KEY }}
          spring.security.oauth2.client.registration.naver.client-id: ${{ secrets.NAVER_CLIENT_ID }}
          spring.security.oauth2.client.registration.naver.client-secret: ${{ secrets.NAVER_CLIENT_SECRET }}
          spring.security.oauth2.client.registration.naver.redirect-uri: ${{ secrets.NAVER_REDIRECT_URI }}
          spring.security.oauth2.client.registration.kakao.client-id: ${{ secrets.KAKAO_CLIENT_ID }}
          spring.security.oauth2.client.registration.kakao.client-secret: ${{ secrets.KAKAO_SECRET }}
          spring.security.oauth2.client.registration.kakao.client-authentication-method: ${{ secrets.KAKAO_AUTHENTICATION_METHOD }}
          spring.security.oauth2.client.registration.kakao.redirect-uri: ${{ secrets.KAKAO_REDIRECT_URI }}
          spring.security.oauth2.client.registration.google.client-id: ${{ secrets.GOOGLE_CLIENT_ID }}
          spring.security.oauth2.client.registration.google.client-secret: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          spring.security.oauth2.client.registration.google.redirect-uri: ${{ secrets.GOOGLE_REDIRECT_URI }}

      # ④ .env 세팅: Docker 컨테이너 환경변수로 주입할 .env 파일을 생성한다.
      - name: environment variable setting
        run: |
          echo "SPRING_JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "SPRING_DATASOURCE_URL=jdbc:mysql://${{ secrets.MYSQL_HOST }}:3306/pushop?&serverTimezone=Asia/Seoul" >> .env
          echo "SPRING_DATASOURCE_USERNAME=${{ secrets.MYSQL_USERNAME }}" >> .env
          echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
          echo "SPRING_MAIL_PASSWORD=${{ secrets.NAVER_PASSWORD }}" >> .env
          echo "SPRING_BACKEND_URL=${{ secrets.BACKEND_URL }}" >> .env
          echo "SPRING_FRONTEND_URL=${{ secrets.FRONTEND_URL }}" >> .env
          echo "NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}" >> .env
          echo "NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}" >> .env
          echo "KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}" >> .env
          echo "KAKAO_SECRET=${{ secrets.KAKAO_SECRET }}" >> .env
          echo "KAKAO_AUTHENTICATION_METHOD=${{ secrets.KAKAO_AUTHENTICATION_METHOD }}" >> .env
          echo "KAKAO_REDIRECT_URI=${{ secrets.KAKAO_REDIRECT_URI }}" >> .env
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
          echo "GOOGLE_REDIRECT_URI=${{ secrets.GOOGLE_REDIRECT_URI }}" >> .env
          echo "NAVER_REDIRECT_URI=${{ secrets.NAVER_REDIRECT_URI }}" >> .env

      # ⑤ gradlew 실행 권한 부여: gradlew 파일에 실행 권한을 준다.
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # ⑥ Gradle 세팅: Gradle 빌드 환경 준비
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3.1.0

      # ⑦ 빌드 실행: Java 프로젝트를 빌드 (jar 생성)
      - name: Build with Gradle Wrapper
        run: ./gradlew build

      # ⑧ 압축 파일 생성: AWS CodeDeploy에 전달할 zip 패키지 생성
      - name: Make zip file
        run: zip -r ./$GITHUB_SHA.zip .
        shell: bash

      # ⑨ AWS 인증 설정: AWS 액세스 권한 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # ⑩ S3 업로드: 압축된 zip 파일을 S3 버킷에 업로드
      - name: Upload to S3
        run: aws s3 cp ./$GITHUB_SHA.zip s3://${{ secrets.S3_BUCKET_NAME }}/$GITHUB_SHA.zip

      # ⑪ CodeDeploy 실행: S3에서 zip을 받아 지정한 EC2 또는 서버에 배포 수행
      - name: Code Deploy
        run: |
          aws deploy create-deployment \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --application-name ${{ secrets.CODE_DEPLOY_APPLICATION_NAME }} \
            --deployment-group-name ${{ secrets.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
            --s3-location bucket=${{ secrets.S3_BUCKET_NAME }},bundleType=zip,key=$GITHUB_SHA.zip

      # ⑫ Docker 이미지 빌드: Dockerfile을 기반으로 컨테이너 이미지 생성
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/shop:${{ github.sha }} .

      # ⑬ DockerHub 로그인: DockerHub에 로그인
      - name: Login to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # ⑭ DockerHub에 푸시: 빌드한 이미지를 DockerHub 레지스트리에 업로드
      - name: Push Docker image to DockerHub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/shop:${{ github.sha }}

  dependency-submission:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Generate and submit dependency graph
        uses: gradle/actions/dependency-submission@v3.1.0
